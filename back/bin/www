#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back:server');
var http = require('http');
const socketIo = require('socket.io');
const Message = require('../models/index').Messages;
const requestUsers = {};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: '*'
  }
});

io.on('connection', async (socket) => {
  // Storing the socket

  console.log("socket connected");
  requestUsers[socket.handshake.query.moveRequest] = [...(requestUsers[socket.handshake.query.moveRequest] || []), socket.id];
  try {
    const results = await Message.findAll({
      attributes: ['FromName', 'Content'],
      where: {
        RequestID: socket.handshake.query.moveRequest
      }
    });
    io.to(socket.id).emit('connection', results.map(msg => {
      return {
        from: msg['dataValues']['FromName'],
        content: msg['dataValues']['Content']
      }
    }));
  }
  catch (exception) {
    console.error(exception);
  }
  socket.on('private message', async ({ content }) => {
    console.log("content", content);
    const newMessage = await Message.create({
      RequestID: socket.handshake.query.moveRequest,
      FromName: socket.handshake.query.name,
      Content: content
    });
    if (socket.handshake.query.moveRequest in requestUsers) {
      const targetSocketIds = requestUsers[socket.handshake.query.moveRequest];
      console.log('real time massage to');
      targetSocketIds.forEach(targetSocketId => {
        io.to(targetSocketId).emit('private message', {
          content,
          from: socket.handshake.query.name,
        });
      });
    }
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Server is running on port ' + addr.port);
  debug('Listening on ' + bind);
}
